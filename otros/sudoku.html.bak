<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üå∏ Sudoku Kawaii üå∏</title>
    <style>
        /* --- Importaci√≥n de Fuente Kawaii --- */
        @import url('https://fonts.googleapis.com/css2?family=Mochiy+Pop+One&display=swap');

        /* --- Estilos Generales del Cuerpo --- */
        body {
            font-family: 'Mochiy Pop One', sans-serif;
            background: linear-gradient(135deg, #ffdde1, #ee9ca7);
            color: #5b3a42;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            user-select: none;
            flex-direction: column;
            padding: 20px;
            box-sizing: border-box;
        }

        /* --- Contenedor Principal --- */
        #game-container {
            background-color: rgba(255, 255, 255, 0.8);
            padding: 25px;
            border-radius: 30px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 500px;
            width: 100%;
        }

        h1 {
            font-size: 2.5rem;
            color: #ff69b4; /* Rosa intenso */
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
            margin-top: 0;
        }

        /* --- Pantalla de Selecci√≥n de Dificultad --- */
        #difficulty-selection button {
            font-family: 'Mochiy Pop One', sans-serif;
            font-size: 1.2rem;
            padding: 15px 25px;
            border: none;
            border-radius: 50px;
            margin: 10px;
            cursor: pointer;
            color: white;
            transition: transform 0.2s, box-shadow 0.2s;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }

        #difficulty-selection button:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.2);
        }

        #btn-easy { background-color: #84fab0; } /* Verde menta */
        #btn-medium { background-color: #fbc2eb; } /* Rosa pastel */
        #btn-hard { background-color: #a6c1ee; } /* Azul cielo */

        /* --- Pantalla del Juego --- */
        #game-board {
            display: none; /* Oculto al principio */
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }
        
        /* --- Cuadr√≠cula del Sudoku --- */
        #grid {
            display: grid;
            grid-template-columns: repeat(9, 1fr);
            grid-template-rows: repeat(9, 1fr);
            width: 100%;
            max-width: 450px;
            height: auto;
            aspect-ratio: 1 / 1;
            border: 3px solid #ff69b4;
            border-radius: 15px;
            overflow: hidden;
            background-color: #fff0f5; /* Rosa muy claro */
        }

        .cell {
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: clamp(1rem, 4vw, 1.8rem);
            border: 1px solid #fbc2eb;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .cell:nth-child(3n) { border-right: 3px solid #ff69b4; }
        .cell:nth-child(9n) { border-right: none; }
        .cell:nth-child(n+19):nth-child(-n+27),
        .cell:nth-child(n+46):nth-child(-n+54) { border-bottom: 3px solid #ff69b4; }

        .cell.selected {
            background-color: #a6c1ee;
            color: white;
        }

        .cell.given {
            background-color: #fff9c4; /* Amarillo pastel */
            color: #5b3a42;
            cursor: not-allowed;
            font-weight: bold;
        }
        
        .cell.error {
            background-color: #ff8a80; /* Rojo claro */
            color: white;
            animation: shake 0.5s;
        }
        
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          25% { transform: translateX(-5px); }
          75% { transform: translateX(5px); }
        }

        /* --- Paleta de N√∫meros --- */
        #digits {
            display: flex;
            justify-content: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .digit {
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5rem;
            border-radius: 10px;
            cursor: pointer;
            background-color: white;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: background-color 0.2s, transform 0.2s;
        }

        .digit:hover {
            background-color: #ffc107; /* Amarillo */
            transform: scale(1.1);
        }

        #erase-btn {
            background-color: #ff8a80;
            color: white;
        }

        /* --- Mensaje de Victoria --- */
        #win-message {
            display: none;
            font-size: 2rem;
            color: #4caf50;
            animation: pop-in 0.5s ease-out;
        }

        @keyframes pop-in {
            0% { transform: scale(0); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }
    </style>
</head>
<body>

    <div id="game-container">
        <h1>üå∏ Sudoku Kawaii üå∏</h1>
        
        <div id="difficulty-selection">
            <h2>Elige un nivel ‚ú®</h2>
            <button id="btn-easy">F√°cil üçì</button>
            <button id="btn-medium">Medio ‚≠ê</button>
            <button id="btn-hard">Dif√≠cil üíñ</button>
        </div>

        <div id="game-board">
            <div id="grid"></div>
            <div id="digits"></div>
            <p id="win-message">¬°Felicidades, lo lograste! üéâ</p>
        </div>
    </div>

    <script>
        // --- Constantes y Variables del Juego ---
        const
            GRID_SIZE = 9,
            BOX_SIZE = 3,
            EMPTY_CELL = 0;

        const
            DIFFICULTY = {
                EASY: 45,   // Celdas a quitar
                MEDIUM: 55,
                HARD: 60
            };
            
        let board = [],
            solution = [],
            selectedCell = null;

        // --- Elementos del DOM ---
        const gridElement = document.getElementById('grid');
        const digitsElement = document.getElementById('digits');
        const difficultySelection = document.getElementById('difficulty-selection');
        const gameBoardElement = document.getElementById('game-board');
        const winMessage = document.getElementById('win-message');

        // --- Manejadores de Eventos ---
        document.getElementById('btn-easy').addEventListener('click', () => startGame(DIFFICULTY.EASY));
        document.getElementById('btn-medium').addEventListener('click', () => startGame(DIFFICULTY.MEDIUM));
        document.getElementById('btn-hard').addEventListener('click', () => startGame(DIFFICULTY.HARD));

        // --- L√≥gica del Juego ---
        
        /**
         * Inicia el juego con la dificultad seleccionada
         */
        function startGame(difficulty) {
            difficultySelection.style.display = 'none';
            gameBoardElement.style.display = 'flex';
            winMessage.style.display = 'none';

            // Generar un nuevo tablero y soluci√≥n
            board = generateEmptyGrid();
            solution = generateEmptyGrid();
            
            generateSolution(board);
            // Copiar la soluci√≥n completa antes de crear el puzle
            for (let r = 0; r < GRID_SIZE; r++) {
                for (let c = 0; c < GRID_SIZE; c++) {
                    solution[r][c] = board[r][c];
                }
            }
            
            generatePuzzle(board, difficulty);

            // Renderizar el tablero y los d√≠gitos
            renderBoard();
            renderDigits();
        }

        /**
         * Renderiza la cuadr√≠cula del Sudoku en el HTML
         */
        function renderBoard() {
            gridElement.innerHTML = '';
            for (let r = 0; r < GRID_SIZE; r++) {
                for (let c = 0; c < GRID_SIZE; c++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.dataset.row = r;
                    cell.dataset.col = c;
                    
                    if (board[r][c] !== EMPTY_CELL) {
                        cell.textContent = board[r][c];
                        cell.classList.add('given'); // Celdas pre-rellenadas
                    } else {
                        // Event listener solo para celdas vac√≠as
                        cell.addEventListener('click', () => {
                            if (selectedCell) {
                                selectedCell.classList.remove('selected');
                            }
                            selectedCell = cell;
                            cell.classList.add('selected');
                        });
                    }
                    gridElement.appendChild(cell);
                }
            }
        }
        
        /**
         * Renderiza la paleta de n√∫meros y el bot√≥n de borrar
         */
        function renderDigits() {
            digitsElement.innerHTML = '';
            for (let i = 1; i <= GRID_SIZE; i++) {
                const digit = document.createElement('div');
                digit.textContent = i;
                digit.classList.add('digit');
                digit.addEventListener('click', () => placeNumber(i));
                digitsElement.appendChild(digit);
            }
            const eraseBtn = document.createElement('div');
            eraseBtn.textContent = 'X';
            eraseBtn.classList.add('digit');
            eraseBtn.id = 'erase-btn';
            eraseBtn.addEventListener('click', () => placeNumber(EMPTY_CELL));
            digitsElement.appendChild(eraseBtn);
        }

        /**
         * Coloca un n√∫mero en la celda seleccionada
         */
        function placeNumber(num) {
            if (!selectedCell || selectedCell.classList.contains('given')) {
                return;
            }

            const row = selectedCell.dataset.row;
            const col = selectedCell.dataset.col;
            
            // Borrar n√∫mero
            if (num === EMPTY_CELL) {
                selectedCell.textContent = '';
                board[row][col] = EMPTY_CELL;
                selectedCell.classList.remove('error');
                return;
            }

            // Comprobar si el n√∫mero es correcto
            if (solution[row][col] === num) {
                selectedCell.textContent = num;
                board[row][col] = num;
                selectedCell.classList.remove('error');
                selectedCell.classList.remove('selected');
                selectedCell = null;
                
                if (isBoardFull()) {
                    checkWin();
                }

            } else {
                // Mostrar error
                selectedCell.classList.add('error');
                setTimeout(() => {
                    selectedCell.classList.remove('error');
                }, 500);
            }
        }
        
        /**
         * Comprueba si el tablero est√° completo y es correcto
         */
        function checkWin() {
            for (let r = 0; r < GRID_SIZE; r++) {
                for (let c = 0; c < GRID_SIZE; c++) {
                    if (board[r][c] !== solution[r][c]) {
                        return; // Si algo no coincide, no ha ganado
                    }
                }
            }
            winMessage.style.display = 'block';
        }
        
        function isBoardFull() {
             for (let r = 0; r < GRID_SIZE; r++) {
                for (let c = 0; c < GRID_SIZE; c++) {
                    if (board[r][c] === EMPTY_CELL) {
                        return false;
                    }
                }
            }
            return true;
        }

        // --- Algoritmos de Generaci√≥n de Sudoku ---

        /**
         * Crea una matriz 9x9 vac√≠a (llena de ceros)
         */
        function generateEmptyGrid() {
            return new Array(GRID_SIZE).fill(0).map(() => new Array(GRID_SIZE).fill(EMPTY_CELL));
        }

        /**
         * Genera una soluci√≥n completa de Sudoku usando backtracking
         */
        function generateSolution(grid) {
            const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            shuffle(numbers); // Aleatoriedad

            for (let r = 0; r < GRID_SIZE; r++) {
                for (let c = 0; c < GRID_SIZE; c++) {
                    if (grid[r][c] === EMPTY_CELL) {
                        for (let num of numbers) {
                            if (isValid(grid, r, c, num)) {
                                grid[r][c] = num;
                                if (generateSolution(grid)) {
                                    return true;
                                }
                                grid[r][c] = EMPTY_CELL; // Backtrack
                            }
                        }
                        return false;
                    }
                }
            }
            return true;
        }

        /**
         * Crea un puzzle quitando celdas de una soluci√≥n completa
         */
        function generatePuzzle(grid, holes) {
            let removed = 0;
            while (removed < holes) {
                const row = Math.floor(Math.random() * GRID_SIZE);
                const col = Math.floor(Math.random() * GRID_SIZE);
                if (grid[row][col] !== EMPTY_CELL) {
                    grid[row][col] = EMPTY_CELL;
                    removed++;
                }
            }
        }

        /**
         * Comprueba si un n√∫mero es v√°lido en una posici√≥n dada
         */
        function isValid(grid, row, col, num) {
            // Comprobar fila y columna
            for (let i = 0; i < GRID_SIZE; i++) {
                if (grid[row][i] === num || grid[i][col] === num) {
                    return false;
                }
            }

            // Comprobar caja 3x3
            const startRow = Math.floor(row / BOX_SIZE) * BOX_SIZE;
            const startCol = Math.floor(col / BOX_SIZE) * BOX_SIZE;
            for (let r = 0; r < BOX_SIZE; r++) {
                for (let c = 0; c < BOX_SIZE; c++) {
                    if (grid[startRow + r][startCol + c] === num) {
                        return false;
                    }
                }
            }

            return true;
        }

        /**
         * Algoritmo Fisher-Yates para barajar un array
         */
        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }
    </script>
</body>
</html>